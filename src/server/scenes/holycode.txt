import { ExtendedObject3D, Physics, ServerClock } from '@enable3d/ammo-on-nodejs'
import { Debug } from '../../utils/debug/debug';
import { GameObject } from '../../game/gameObject/gameObject'
import { Game } from '../../game/game/game';
import THREE from 'three';

export class ServerScene
{
    public game: Game;

    public physics!: Physics;
    public clock!: ServerClock;

    public objects: ExtendedObject3D[] = [];

    public ground?: GameObject;
    public box?: GameObject;

    public testRigidBody?: Ammo.btRigidBody;

    constructor(game: Game)
    {
        this.game = game;
    }

    public init()
    {
        Debug.log("ServerScene", "init");

        // test if we have access to Ammo
        Debug.log('ServerScene', 'Ammo', new Ammo.btVector3(1, 2, 3).y() === 2)

        // init the Physics
        this.physics = new Physics();

        this.create()
    }

    public create()
    {

        const physics = this.physics;


        const robot = new ExtendedObject3D()
        robot.name = 'robot'
  
        //robot.add(fbx)
        robot.scale.set(0.05, 0.05, 0.05)
        robot.position.set(0, 10, 0)

  

        // Define the half-extents of the box
        
        /*
        const halfExtents = new Ammo.btVector3(1, 1, 1);  // Half-extents (1,1,1) for a 2x2x2 box
        const boxShape = new Ammo.btBoxShape(halfExtents);

        const transform = new Ammo.btTransform();
        transform.setIdentity();  // No rotation, aligned with the world frame
        const position = new Ammo.btVector3(0, 0, 0);  // Starting position at (0,0,0)
        transform.setOrigin(position);  // Set the position in the transform

        const motionState = new Ammo.btDefaultMotionState(transform);

        const mass: number = 1.0;  // A nonzero mass, for example, 1.0 kg
        const localInertia = new Ammo.btVector3(0, 0, 0);

        // Only compute inertia if the body will be dynamic
        if (mass !== 0) {
            boxShape.calculateLocalInertia(mass, localInertia);
        }

        const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, boxShape, localInertia);
        const rigidBody = new Ammo.btRigidBody(rbInfo);
        this.testRigidBody = rigidBody;

        this.physics.physicsWorld.addRigidBody(rigidBody);
        */



        /*
        const ground = this.game.createBox({
            name: 'ground',
            width: 20,
            height: 1,
            depth: 20,
            collisionFlags: 2,
            mass: 0
        });
        this.ground = ground;
        */

        /*
        const box = this.game.createBox({
            name: 'box',
            width: 1,
            height: 1,
            depth: 1,
            mass: 1,
            x: 0,
            y: 5,
            z: 0
        });
        this.box = box;
        */

        
        /*
        const ground = this.physics.add.box({
            name: 'ground',
            width: 40,
            depth: 40,
            collisionFlags: 2,
            mass: 0
        })
        //this.objects.push(ground);

        const box = this.physics.add.box({ name: 'box', y: 5 })
        */

        //this.objects.push(box);
        //*/

        // clock
        const clock = new ServerClock(60, false);
        this.clock = clock;
      
        // for debugging you disable high accuracy
        // high accuracy uses much more cpu power
        if (process.env.NODE_ENV !== 'production')
        {
            this.clock.disableHighAccuracy();
        }
    }

    public startUpdateClock()
    {
        Debug.log("ServerScene", "startUpdateClock");

        this.clock.onTick(delta => this.update(delta * 1000));
        this.clock.start();
    }

    public update(delta: number)
    {
        
        this.physics.update(delta);
          

        /*
        Debug.log("ServerScene", "update, delta=" + delta);

        if(this.ground) this.ground.printInfo();
        if(this.box) this.box.printInfo();

        if(this.testRigidBody)
        {
            const body = this.testRigidBody;
            const motionState = body.getMotionState();

            const transform = new Ammo.btTransform();
            motionState.getWorldTransform(transform);
            
            // Now you can extract the position from the transform
            const position = transform.getOrigin();
            const x = position.x();
            const y = position.y();
            const z = position.z();

            console.log(`Position of the body is (${x}, ${y}, ${z})`);
        }

        //console.log("y:", y.toFixed(2), "delta:", delta.toFixed(2));

        // will print the y position of the box from 5.00 to 1.00
        //if (y > 1) console.log('y:', y);

        // TODO
        // send new positions to the client
        */
    }
}